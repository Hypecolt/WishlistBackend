generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model chat {
  id          Int          @id @default(autoincrement())
  userId1     Int
  userId2     Int
  historyId   Int?
  createtime  DateTime     @default(now())
  updatetime  DateTime     @updatedAt
  deletetime  Float?
  chathistory chathistory? @relation(fields: [historyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_fk0")
  userchats   userchats[]

  @@index([historyId], map: "chat_fk0")
}

model chathistory {
  id         Int       @id @default(autoincrement())
  userId     Int
  message    String    @db.Char(255)
  createtime DateTime  @default(now())
  updatetime DateTime  @updatedAt
  deletetime DateTime?
  chat       chat[]
}

model friendlist {
  id          Int           @id @default(autoincrement())
  userId1     Int
  userId2     Int
  userdetails userdetails[]
}

model group {
  id             Int              @id @default(autoincrement())
  owner          Int
  name           String           @unique(map: "name") @db.Char(255)
  createtime     DateTime         @default(now())
  updatetime     DateTime         @updatedAt
  deletetime     DateTime?
  groupwishlists groupwishlists[]
  invites        invites[]
  useringroup    useringroup[]
}

model groupwishlists {
  id         Int       @id @default(autoincrement())
  groupId    Int
  wishlistId Int
  createtime DateTime  @default(now())
  updatetime DateTime  @updatedAt
  deletetime DateTime?
  group      group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "groupWishlists_fk0")
  wishlist   wishlist  @relation(fields: [wishlistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "groupWishlists_fk1")

  @@index([groupId], map: "groupWishlists_fk0")
  @@index([wishlistId], map: "groupWishlists_fk1")
}

model items {
  id              Int               @id @default(autoincrement())
  name            String            @db.Char(255)
  details         String            @db.Char(255)
  size            String?           @db.Char(255)
  createtime      DateTime          @default(now())
  updatetime      DateTime          @updatedAt
  deletetime      DateTime?
  userId          Int
  users           users             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "items_fk0")
  itemsinwishlist itemsinwishlist[]

  @@index([userId], map: "items_fk0")
}

model itemsinwishlist {
  id         Int       @id @default(autoincrement())
  wishlistId Int
  itemId     Int
  createtime DateTime  @default(now())
  updatetime DateTime  @updatedAt
  bought     Boolean
  deletetime DateTime?
  wishlist   wishlist  @relation(fields: [wishlistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "itemsInWishlist_fk0")
  items      items     @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "itemsInWishlist_fk1")

  @@index([wishlistId], map: "itemsInWishlist_fk0")
  @@index([itemId], map: "itemsInWishlist_fk1")
}

model useraddress {
  id          Int           @id
  country     String        @db.Char(255)
  city        String?       @db.Char(255)
  street      String?       @db.Char(255)
  zipCode     Int?
  createtime  DateTime      @default(now())
  updatetime  DateTime      @updatedAt
  deletetime  DateTime?
  userdetails userdetails[]
}

model userchats {
  id     Int   @id @default(autoincrement())
  userId Int
  chatId Int
  users  users @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userChats_fk0")
  chat   chat  @relation(fields: [chatId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userChats_fk1")

  @@index([userId], map: "userChats_fk0")
  @@index([chatId], map: "userChats_fk1")
}

model userdetails {
  id            Int          @id @default(autoincrement())
  userId        Int
  firstName     String       @db.Char(255)
  lastName      String       @db.Char(255)
  phone         String       @unique(map: "phone") @db.Char(255)
  dob           DateTime     @db.Date
  addressId     Int?
  friendslistId Int?
  createtime    DateTime     @default(now())
  updatetime    DateTime     @updatedAt
  deletetime    DateTime?
  users         users        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userDetails_fk0")
  useraddress   useraddress? @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userDetails_fk1")
  friendlist    friendlist?  @relation(fields: [friendslistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userDetails_fk2")

  @@index([userId], map: "userDetails_fk0")
  @@index([addressId], map: "userDetails_fk1")
  @@index([friendslistId], map: "userDetails_fk2")
}

model useringroup {
  id         Int       @id @default(autoincrement())
  userid     Int
  groupid    Int
  createtime DateTime  @default(now())
  updatetime DateTime  @updatedAt
  deletetime DateTime?
  users      users     @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userInGroup_fk0")
  group      group     @relation(fields: [groupid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userInGroup_fk1")

  @@index([userid], map: "userInGroup_fk0")
  @@index([groupid], map: "userInGroup_fk1")
}

model users {
  id            Int             @id @default(autoincrement())
  username      String          @unique(map: "username") @db.Char(255)
  email         String          @unique(map: "email") @db.Char(255)
  password      String          @db.Char(255)
  createtime    DateTime        @default(now())
  updatetime    DateTime        @updatedAt
  deletetime    DateTime?
  items         items[]
  notifications notifications[]
  userchats     userchats[]
  userdetails   userdetails[]
  useringroup   useringroup[]
  wishlist      wishlist[]
}

model wishlist {
  id              Int               @id @default(autoincrement())
  ownerId         Int
  name            String            @unique(map: "name") @db.Char(255)
  createtime      DateTime          @default(now())
  updatetime      DateTime          @updatedAt
  deletetime      DateTime?
  users           users             @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wishlist_fk0")
  groupwishlists  groupwishlists[]
  itemsinwishlist itemsinwishlist[]

  @@index([ownerId], map: "wishlist_fk0")
}

model invites {
  id         Int       @id @default(autoincrement())
  code       String    @unique(map: "code") @db.Char(255)
  groupid    Int
  createtime DateTime  @default(now())
  updatetime DateTime  @updatedAt
  deletetime DateTime?
  group      group     @relation(fields: [groupid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invites_fk0")

  @@index([groupid], map: "invites_fk0")
}

model notifications {
  id         Int      @id @default(autoincrement())
  message    String   @db.Char(255)
  userid     Int
  createtime DateTime  @default(now())
  updatetime DateTime  @updatedAt
  deletetime DateTime?
  users      users    @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_fk0")

  @@index([userid], map: "notifications_fk0")
}
